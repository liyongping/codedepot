<tt xmlns:tts="http://www.w3.org/ns/ttml#styling" xmlns:ttm="http://www.w3.org/ns/ttml#metadata" xmlns="http://www.w3.org/ns/ttml" xml:lang="en">
  <head>
    <styling>
      <style xml:id="basic" tts:textAlign="center"/>
    </styling>
    <ttm:metadata>
      <ttm:title>9780134175249-EPLL_01_02.dfxp</ttm:title>
    </ttm:metadata>
  </head>
  <body style="basic">
    <div>
      <p begin="00:00:06.053" end="00:00:08.019">- [Voiceover] In addition<br/>to basic slicing,</p>
      <p begin="00:00:08.019" end="00:00:10.238">Python has special syntax<br/>for the stride of a slice</p>
      <p begin="00:00:10.238" end="00:00:12.798">as a third parameter in<br/>the slice expression.</p>
      <p begin="00:00:12.798" end="00:00:15.727">So you have the start<br/>index which is inclusive,</p>
      <p begin="00:00:15.727" end="00:00:18.349">the end index which is exclusive,</p>
      <p begin="00:00:18.349" end="00:00:20.946">and then the stride which is an interval</p>
      <p begin="00:00:20.946" end="00:00:23.038">that lets you take every nth item</p>
      <p begin="00:00:23.038" end="00:00:24.873">while slicing the sequence.</p>
      <p begin="00:00:24.873" end="00:00:26.536">For example, the stride<br/>makes it easy to group</p>
      <p begin="00:00:26.536" end="00:00:28.486">by even and odd indexes on the list.</p>
      <p begin="00:00:28.486" end="00:00:30.333">So here I have a set of colors,</p>
      <p begin="00:00:30.333" end="00:00:32.988">and I can say give me<br/>all of the even indexes</p>
      <p begin="00:00:32.988" end="00:00:35.186">in the list by starting<br/>at the zeroth index</p>
      <p begin="00:00:35.186" end="00:00:37.433">and then striding every two to get</p>
      <p begin="00:00:37.433" end="00:00:41.891">red at zero, yellow at two, blue at four.</p>
      <p begin="00:00:41.891" end="00:00:43.166">I can start at the first index</p>
      <p begin="00:00:43.166" end="00:00:45.084">and then go every two to get the odds.</p>
      <p begin="00:00:45.084" end="00:00:48.113">So this is index one, three, and five.</p>
      <p begin="00:00:48.113" end="00:00:50.300">The problem is that the<br/>stride syntax often causes</p>
      <p begin="00:00:50.300" end="00:00:52.881">unexpected behavior<br/>that can introduce bugs.</p>
      <p begin="00:00:52.881" end="00:00:56.016">For example, a common Python<br/>idiom for reversing a string</p>
      <p begin="00:00:56.016" end="00:00:58.860">is to take the negative stride.</p>
      <p begin="00:00:58.860" end="00:01:00.107">The way this works is by iterating</p>
      <p begin="00:01:00.107" end="00:01:01.911">through the string in<br/>reverse to create a slice,</p>
      <p begin="00:01:01.911" end="00:01:04.225">that is the reversed slice.</p>
      <p begin="00:01:04.225" end="00:01:05.686">So here you can see I can take mongoose</p>
      <p begin="00:01:05.686" end="00:01:07.885">and turn it into 'esoognom'.</p>
      <p begin="00:01:07.885" end="00:01:10.655">That idiom works well for<br/>bytestrings and ascii characters</p>
      <p begin="00:01:10.655" end="00:01:13.705">but it'll break for unicode<br/>characters encoded as utf-8.</p>
      <p begin="00:01:13.705" end="00:01:18.705">So here I take a string, and<br/>I encode it as utf-8 bytes.</p>
      <p begin="00:01:18.825" end="00:01:21.761">Then I run the same idiom<br/>where I reverse the string,</p>
      <p begin="00:01:21.761" end="00:01:24.105">and then I try to turn it<br/>back into a unicode string</p>
      <p begin="00:01:24.105" end="00:01:27.933" tts:origin="0% 0%">by decoding the utf-8<br/>bytes, and this breaks,</p>
      <p begin="00:01:27.933" end="00:01:30.325" tts:origin="0% 0%">because I've broken the actual encoding</p>
      <p begin="00:01:30.325" end="00:01:33.353" tts:origin="0% 0%">of utf-8 in the byte<br/>string by reversing it.</p>
      <p begin="00:01:33.353" end="00:01:35.520" tts:origin="0% 0%">So tricks like this can be dangerous.</p>
      <p begin="00:01:35.520" end="00:01:37.365">So the question is, are negative strides</p>
      <p begin="00:01:37.365" end="00:01:39.402">besides the negative one useful?</p>
      <p begin="00:01:39.402" end="00:01:41.290">Let's go through some examples.</p>
      <p begin="00:01:41.290" end="00:01:44.618">So the first one is saying<br/>give me every second item,</p>
      <p begin="00:01:44.618" end="00:01:47.988">this is our evens example from before.</p>
      <p begin="00:01:47.988" end="00:01:51.039">Slightly trickier is negative two stride,</p>
      <p begin="00:01:51.039" end="00:01:52.788">which means select every second item</p>
      <p begin="00:01:52.788" end="00:01:55.838">starting at the end moving backwards.</p>
      <p begin="00:01:55.838" end="00:01:58.153">Now let's go through some<br/>more difficult examples.</p>
      <p begin="00:01:58.153" end="00:01:59.593">And try to guess what these mean.</p>
      <p begin="00:01:59.593" end="00:02:01.748">So say you start at the second index,</p>
      <p begin="00:02:01.748" end="00:02:04.243">and then stride every<br/>two, so this makes sense,</p>
      <p begin="00:02:04.243" end="00:02:06.462">you start at 'c', and then we go</p>
      <p begin="00:02:06.462" end="00:02:09.950">every two from there, 'c', 'e', 'g'.</p>
      <p begin="00:02:09.950" end="00:02:12.190">Less obvious is if we start<br/>at the negative two index</p>
      <p begin="00:02:12.190" end="00:02:14.237">and stride by negative two.</p>
      <p begin="00:02:14.237" end="00:02:17.149">So this starts at 'g' and<br/>then works backwards by two</p>
      <p begin="00:02:17.149" end="00:02:21.052">to 'e', and then to 'c', and then to 'a'.</p>
      <p begin="00:02:21.052" end="00:02:23.019">When things start getting<br/>crazy is when we add</p>
      <p begin="00:02:23.019" end="00:02:26.766">yet another item into this<br/>with the ends of the index.</p>
      <p begin="00:02:26.766" end="00:02:30.456">So here, we started at<br/>negative two index 'g',</p>
      <p begin="00:02:30.456" end="00:02:33.767">we end at the second index of 'c',</p>
      <p begin="00:02:33.767" end="00:02:37.159">and then we stride by<br/>negative two from 'g' to 'e',</p>
      <p begin="00:02:37.159" end="00:02:39.367">and then 'c' is exclusive<br/>so it's not included.</p>
      <p begin="00:02:39.367" end="00:02:40.774">And finally there's a crazy slice</p>
      <p begin="00:02:40.774" end="00:02:42.278">which is ending at the second one,</p>
      <p begin="00:02:42.278" end="00:02:45.649">but then slicing by negative<br/>two which is just empty.</p>
      <p begin="00:02:45.649" end="00:02:46.843">It's not clear when you look at this</p>
      <p begin="00:02:46.843" end="00:02:49.670">what that even means,<br/>it's just a crazy slice.</p>
      <p begin="00:02:49.670" end="00:02:51.846">To prevent problems, I<br/>suggest you avoid using stride</p>
      <p begin="00:02:51.846" end="00:02:54.139">along with the start and end indexes.</p>
      <p begin="00:02:54.139" end="00:02:57.430">If you must use stride, prefer<br/>making it a positive value</p>
      <p begin="00:02:57.430" end="00:02:59.995">and omitting the start and end indexes.</p>
      <p begin="00:02:59.995" end="00:03:01.637">So you just use stride on its own.</p>
      <p begin="00:03:01.637" end="00:03:04.902">If you must use stride<br/>with start or end indexes,</p>
      <p begin="00:03:04.902" end="00:03:07.094">consider doing the stride first,</p>
      <p begin="00:03:07.094" end="00:03:11.311">and then slicing the strided<br/>list by start and end,</p>
      <p begin="00:03:11.311" end="00:03:13.284">so these are two operations.</p>
      <p begin="00:03:13.284" end="00:03:16.384">So now you can see the original list,</p>
      <p begin="00:03:16.384" end="00:03:20.739" tts:origin="0% 0%">the strided list, and the sliced list.</p>
      <p begin="00:03:20.739" end="00:03:22.137" tts:origin="0% 0%">One thing that's important to note</p>
      <p begin="00:03:22.137" end="00:03:23.961" tts:origin="0% 0%">is that slicing and then striding</p>
      <p begin="00:03:23.961" end="00:03:26.446" tts:origin="0% 0%">will create an extra<br/>shallow copy of the data,</p>
      <p begin="00:03:26.446" end="00:03:28.313" tts:origin="0% 0%">so the first operation should try</p>
      <p begin="00:03:28.313" end="00:03:31.342" tts:origin="0% 0%">to reduce the size of the<br/>list as much as possible,</p>
      <p begin="00:03:31.342" end="00:03:35.174">before you then slice<br/>it to smaller pieces.</p>
      <p begin="00:03:35.174" end="00:03:36.803">So here you can see each operation we do</p>
      <p begin="00:03:36.803" end="00:03:40.077">makes a copy of the actual list<br/>that's a little bit smaller,</p>
      <p begin="00:03:40.077" end="00:03:43.309">so ideally operation 'b'<br/>would take as much information</p>
      <p begin="00:03:43.309" end="00:03:45.319">out of the original list as possible.</p>
    </div>
  </body>
</tt>